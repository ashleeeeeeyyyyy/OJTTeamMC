package generate_excel1;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author janxienemaniti
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        itproject_log = new javax.swing.JRadioButton();
        StudPrac_List = new javax.swing.JRadioButton();
        practicum_log = new javax.swing.JRadioButton();
        Student_log = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Caviar Dreams", 0, 36)); // NOI18N
        jLabel2.setText("SCIS LOGBOOK");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Select Filter:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonGroup1.add(itproject_log);
        itproject_log.setText("IT Project Log");

        buttonGroup1.add(StudPrac_List);
        StudPrac_List.setText("Student List (Practicum 1)");
        StudPrac_List.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudPrac_ListActionPerformed(evt);
            }
        });

        buttonGroup1.add(practicum_log);
        practicum_log.setText("Practicum Log");
        practicum_log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                practicum_logActionPerformed(evt);
            }
        });

        buttonGroup1.add(Student_log);
        Student_log.setText("Student List( IT Project)");

        jButton1.setText("Generate Excel File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(itproject_log)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StudPrac_List))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(practicum_log)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Student_log)))
                .addContainerGap(181, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(71, 71, 71))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itproject_log)
                    .addComponent(StudPrac_List))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(practicum_log)
                    .addComponent(Student_log))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void practicum_logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_practicum_logActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_practicum_logActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Connection conn;
        try {
            // Connection for the Database.
            String conStr = "jdbc:mysql://localhost:8889/scislog?user=root&password=";
            conn = DriverManager.getConnection(conStr);
            Statement stmt = conn.createStatement();

            //Filtering for the Log of IT Project
            if (itproject_log.isSelected()) {
                HSSFWorkbook new_workbook = new HSSFWorkbook(); //create a blank workbook object
                HSSFSheet sheet = new_workbook.createSheet("Logbook_Report");  //create a worksheet with caption score_details
        /* Define the SQL query */
                String[] headers = new String[]{"ID NUMBER","First Name","Last Name","ADVISER", "OFFICE", "CLASS CODE", "DATE", "TIME IN", "TIME OUT",};
                int rownumber = 0;
                Row r = sheet.createRow(rownumber);
                for (int rn = 0; rn < headers.length; rn++) {
                    Cell cell = r.createCell(rn);
                    cell.setCellValue((String) headers[rn]);
                }
                ResultSet query_set = stmt.executeQuery("SELECT idnumber,fname,lname, adviser, office, code, date,"
                        + " time_in, time_out FROM logs natural join accounts natural join students where subject = 'IT Project';");
                /* Create Map for Excel Data */
                Map<String, Object[]> excel_data = new HashMap<>(); //create a map and define data
                int row_counter = 0;
                /* Populate data into the Map */
                while (query_set.next()) {
                    row_counter = row_counter + 1;
                    String idnum = query_set.getString("idnumber");
                    String fname = query_set.getString("fname");
                    String lname = query_set.getString("lname");
                    String adviser = query_set.getString("adviser");
                    String office = query_set.getString("office");
                    String class_code = query_set.getString("code");
                    String date = query_set.getString("date");
                    String time_in = query_set.getString("time_in");
                    String time_out = query_set.getString("time_out");
                    excel_data.put(Integer.toString(row_counter), new Object[]{idnum,fname,lname, adviser, office, class_code, date, time_in, time_out});
                }
                /* Close all DB related objects */
                query_set.close();
                stmt.close();
                conn.close();

                /* Load data into logical worksheet */
                Set<String> keyset = excel_data.keySet();
                int rownum = 1;
                for (String key : keyset) { //loop through the data and add them to the cell

                    Row row = sheet.createRow(rownum++);
                    Object[] objArr = excel_data.get(key);
                    int cellnum = 0;
                    for (Object obj : objArr) {
                        Cell cell = row.createCell(cellnum++);
                        if (obj instanceof Double) {
                            cell.setCellValue((Double) obj);
                        } else {
                            cell.setCellValue((String) obj);
                        }
                    }
                }

                FileOutputStream output_file = new FileOutputStream(new File("Excel Files/ITProject_Logs.xls")); //create XLS file
                new_workbook.write(output_file);//write excel document to output stream
                output_file.close(); //close the file
            }

            // Filtering the log for the practicum
            if (practicum_log.isSelected()) {
                HSSFWorkbook new_workbook = new HSSFWorkbook(); //create a blank workbook object
                HSSFSheet sheet = new_workbook.createSheet("Logbook_Report");  //create a worksheet with caption score_details
                 /* Define the SQL query */
                String[] headers = new String[]{"ID NUMBER","First Name","Last Name","ADVISER", "OFFICE", "CLASS CODE", "DATE", "TIME IN", "TIME OUT"};
                int rownumber = 0;
                Row r = sheet.createRow(rownumber);
                for (int rn = 0; rn < headers.length; rn++) {
                    Cell cell = r.createCell(rn);
                    cell.setCellValue((String) headers[rn]);
                }
                ResultSet query_set = stmt.executeQuery("SELECT idnumber,fname,lname, adviser, office, code,date, time_in, time_out FROM logs natural join accounts natural join students where subject = 'Practicum 1';");
                /* Create Map for Excel Data */
                Map<String, Object[]> excel_data = new HashMap<>(); //create a map and define data
                int row_counter = 0;
                /* Populate data into the Map */
                while (query_set.next()) {
                    row_counter = row_counter + 1;
                    String idnum = query_set.getString("idnumber");
                    String fname = query_set.getString("fname");
                    String lname = query_set.getString("lname");
                    String adviser = query_set.getString("adviser");
                    String office = query_set.getString("office");
                    String code = query_set.getString("code");
                    String date = query_set.getString("date");
                    String time_in = query_set.getString("time_in");
                    String time_out = query_set.getString("time_out");
                    excel_data.put(Integer.toString(row_counter), new Object[]{idnum,fname,lname, adviser, office, code, date, time_in, time_out});
                }
                /* Close all DB related objects */
                query_set.close();
                stmt.close();
                conn.close();

                /* Load data into logical worksheet */
                Set<String> keyset = excel_data.keySet();
                int rownum = 1;
                for (String key : keyset) { //loop through the data and add them to the cell

                    Row row = sheet.createRow(rownum++);
                    Object[] objArr = excel_data.get(key);
                    int cellnum = 0;
                    for (Object obj : objArr) {
                        Cell cell = row.createCell(cellnum++);
                        if (obj instanceof Double) {
                            cell.setCellValue((Double) obj);
                        } else {
                            cell.setCellValue((String) obj);
                        }
                    }
                }

                FileOutputStream output_file = new FileOutputStream(new File("Excel Files/Practicum_Logs.xls")); //create XLS file
                new_workbook.write(output_file);//write excel document to output stream
                output_file.close(); //close the file
            }

            // Filtering the List of Student Enrolled in Practicum 1
            if (StudPrac_List.isSelected()) {
                HSSFWorkbook new_workbook = new HSSFWorkbook(); //create a blank workbook object
                HSSFSheet sheet = new_workbook.createSheet("Logbook_Report");  //create a worksheet with caption score_details
                 /* Define the SQL query */
                String[] headers = new String[]{"ID NUMBER", "NAME", "COURSE AND YEAR",
                    "SUBJECT", "CODE", "ADVISER"};
                int rownumber = 0;
                Row r = sheet.createRow(rownumber);
                for (int rn = 0; rn < headers.length; rn++) {
                    Cell cell = r.createCell(rn);
                    cell.setCellValue((String) headers[rn]);
                }
                ResultSet query_set = stmt.executeQuery("SELECT idnumber, CONCAT(lname, ', ', fname) AS 'name', course_year, subject, code, adviser FROM accounts natural join students WHERE subject = 'Practicum 1'");
                /* Create Map for Excel Data */
                Map<String, Object[]> excel_data = new HashMap<>(); //create a map and define data
                int row_counter = 0;
                /* Populate data into the Map */
                while (query_set.next()) {
                    row_counter = row_counter + 1;
                    String idnum = query_set.getString("idnumber");
                    String name = query_set.getString("name");
                    String course_year = query_set.getString("course_year");
                    String subject = query_set.getString("subject");
                    String code = query_set.getString("code");
                    String adviser = query_set.getString("adviser");
                    excel_data.put(Integer.toString(row_counter), new Object[]{idnum, name, course_year,
                        subject, code, adviser});
                }
                /* Close all DB related objects */
                query_set.close();
                stmt.close();
                conn.close();

                /* Load data into logical worksheet */
                Set<String> keyset = excel_data.keySet();
                int rownum = 1;
                for (String key : keyset) { //loop through the data and add them to the cell
                    Row row = sheet.createRow(rownum++);
                    Object[] objArr = excel_data.get(key);
                    int cellnum = 0;
                    for (Object obj : objArr) {
                        Cell cell = row.createCell(cellnum++);
                        if (obj instanceof Double) {
                            cell.setCellValue((Double) obj);
                        } else {
                            cell.setCellValue((String) obj);
                        }
                    }
                }

                FileOutputStream output_file = new FileOutputStream(new File("Excel Files/StudentList_Practicum.xls")); //create XLS file
                new_workbook.write(output_file);//write excel document to output stream
                output_file.close(); //close the file
            }
            if (Student_log.isSelected()) {
                HSSFWorkbook new_workbook = new HSSFWorkbook(); //create a blank workbook object
                HSSFSheet sheet = new_workbook.createSheet("Logbook_Report");  //create a worksheet with caption score_details
                 /* Define the SQL query */
                String[] headers = new String[]{"ID NUMBER", "NAME", "COURSE AND YEAR",
                    "SUBJECT", "CODE", "ADVISER"};
                int rownumber = 0;
                Row r = sheet.createRow(rownumber);
                for (int rn = 0; rn < headers.length; rn++) {
                    Cell cell = r.createCell(rn);
                    cell.setCellValue((String) headers[rn]);
                }
                ResultSet query_set = stmt.executeQuery("SELECT idnumber, CONCAT(lname, ', ', fname) AS 'name', course_year, subject, code, adviser FROM accounts natural join students WHERE subject = 'IT Project';");
                /* Create Map for Excel Data */
                Map<String, Object[]> excel_data = new HashMap<>(); //create a map and define data
                int row_counter = 0;
                /* Populate data into the Map */
                while (query_set.next()) {
                    row_counter = row_counter + 1;
                    String idnumber = query_set.getString("idnumber");
                    String name = query_set.getString("name");
                    String course_year = query_set.getString("course_year");
                    String subject = query_set.getString("subject");
                    String code = query_set.getString("code");
                    String adviser = query_set.getString("adviser");
                    excel_data.put(Integer.toString(row_counter), new Object[]{idnumber, name, course_year,
                        subject, code, adviser});
                }
                /* Close all DB related objects */
                query_set.close();
                stmt.close();
                conn.close();

                /* Load data into logical worksheet */
                Set<String> keyset = excel_data.keySet();
                int rownum = 1;
                for (String key : keyset) { //loop through the data and add them to the cell
                    Row row = sheet.createRow(rownum++);
                    Object[] objArr = excel_data.get(key);
                    int cellnum = 0;
                    for (Object obj : objArr) {
                        Cell cell = row.createCell(cellnum++);
                        if (obj instanceof Double) {
                            cell.setCellValue((Double) obj);
                        } else {
                            cell.setCellValue((String) obj);
                        }
                    }
                }

                FileOutputStream output_file = new FileOutputStream(new File("Excel Files/StudentList_ITproject.xls")); //create XLS file
                new_workbook.write(output_file);//write excel document to output stream
                output_file.close(); //close the file
            }
            JOptionPane.showMessageDialog(this, "Excel File Generated Successfully.");
        } catch (SQLException x) {
            x.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void StudPrac_ListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudPrac_ListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StudPrac_ListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton StudPrac_List;
    private javax.swing.JRadioButton Student_log;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton itproject_log;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton practicum_log;
    // End of variables declaration//GEN-END:variables
}
